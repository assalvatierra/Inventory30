@page
@model InvWeb.Pages.Masterfiles.ItemMaster.IndexModel

@{
    ViewData["Title"] = "Item Masters Lists";
}

<h1>Item Masters</h1>

<p>
    <a asp-page="Create" class="btn btn-primary">Create New</a>
</p>

<div class="btn-group">
    <button id="Group-Code" type="button" class="btn btn-secondary" onclick="UpdateGroupFilter('Code')"> Group by Code </button>
    <button id="Group-SubCategory" type="button" class="btn btn-secondary" onclick="UpdateGroupFilter('SubCategory')"> Group by SubCategory </button>
    <button id="Group-SubCategory" type="button" class="btn btn-secondary" onclick="ClearGroupFilter('')"> Clear </button>
</div>

<div class="table-responsive card rounded-3 card-round-border" style="width:fit-content;">

<table class="table custom-table-list rounded-3 overflow-hidden sortable-theme-bootstrap" data-sortable>
    <thead>
        <tr>
            <th> </th>
            <th>
                Code
            </th>
            <th>
                @Html.DisplayNameFor(model => model.InvItemIndex[0].InvItem.Description)
            </th>
            <th>
                Sizes
            </th>
            <th>
                Category
            </th>
            <th>
                UoM
            </th>
            <th>
                Main Category
            </th>
            <th>
                Sub Category
            </th>
            <th>
                Brand
            </th>
            <th>
                Origin
            </th>
            <th>
                Material
            </th>
            <th>
                Material Grade
            </th>
            <th>
                KG/M
            </th>
            <th>
                KG/PC
            </th>
        </tr>
    </thead>
    <tbody>
       


            @if (!String.IsNullOrEmpty(ViewBag.groupBy))
            {
                IEnumerable<IGrouping<string,InvItemIndexModel>> itemGroupResult;
                switch (ViewBag.groupBy)
                {
                    case "Code":
                        itemGroupResult = Model.InvItemIndex.GroupBy(c => c.InvItem.Code);
                        break;
                    case "SubCategory":
                        itemGroupResult = Model.InvItemIndex.GroupBy(c => c.InvItem.InvItemSpec_Steel.FirstOrDefault() == null ? "No Specifications" :  c.InvItem.InvItemSpec_Steel.FirstOrDefault().SteelSubCat.Name );
                        break;
                    default:
                        itemGroupResult = Model.InvItemIndex.GroupBy(c => c.InvItem.InvItemSpec_Steel.FirstOrDefault() == null ? "No Specifications" : c.InvItem.InvItemSpec_Steel.FirstOrDefault().SteelMainCat.Name);
                        break ;
                }

                @foreach (var itemGroup in itemGroupResult)
                {

                    <tr>
                        <td colspan="14" style="background-color:lightgray;font-weight:bold;">
                            @itemGroup.Key
                        </td>
                    </tr>


                    @Html.Partial("_PartialitemsGroup", itemGroup)
                }
            }
            else
            {
                <!-- Default Table -->
                @Html.Partial("_Partialitems", Model.InvItemIndex)
            }

    </tbody>
    </table>
</div>


<!-- Modal : Classifications -->
<div class="modal fade" id="ShowClassificationModal" tabindex="-1" aria-labelledby="ShowClassificationModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="ListClassificationsModal">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        function UpdateGroupFilter(key) {
            window.location = '?groupby=' + key;

        }

        function ClearGroupFilter(){
            window.location = '?';
        }
    </script>
}
